angular.module("FourthBlightApp",["ui.router","ngAnimate"]),angular.module("FourthBlightApp",["ui.router","ngAnimate","toastr"]).controller("ApplicationCtrl",["$scope","$location","$window","toastr",function(t,e,r,l){}]),angular.module("FourthBlightApp").controller("FaqCtrl",["$scope",function(t){}]),angular.module("FourthBlightApp").controller("FurtherCtrl",["$scope",function(t){}]),angular.module("FourthBlightApp").controller("GeneratorCtrl",["$scope",function(t){}]),angular.module("FourthBlightApp").controller("HomeCtrl",["$scope","$location","$window",function(t,e,r){}]),angular.module("FourthBlightApp").controller("LocSearchCtrl",["$scope","SrdSvc",function(t,e){document.getElementById("location-text").focus(),document.getElementById("spell-btn").classList.remove("selected-search"),document.getElementById("monst-btn").classList.remove("selected-search"),document.getElementById("loc-btn").classList.add("selected-search"),t.locationResults={},t.searchLocations=function(r){r.length>=1&&e.getLocations(r).then(function(e){t.locationResults=e})}}]),angular.module("FourthBlightApp").controller("MapCtrl",["$scope",function(t){function e(t){d3.select(this).attr("class","border")}function r(t,e,r){for(var l=2*t*Math.sin(Math.PI/3),n=1.5*t,o=Math.ceil((r+t)/n)+1,a=Math.ceil(e/l)+1,s=[],c=[],u=-1;u<=o;++u)for(var i=-1;i<=a;++i){var h=2*u,p=2*(i+(1&u)/2);c.push([[p,h-1],[1,1]],[[p+1,h],[0,1]],[[p+1,h+1],[-1,1]])}for(var u=0,d=3;u<o;++u,d+=6)for(var i=0;i<a;++i,d+=3)s.push({type:"Polygon",arcs:[[d,d+1,d+2,~(d+3*(a+2-(1&u))),~(d-2),~(d-3*(a+2+(1&u))+2)]],fill:Math.random()>i/a*2});return{transform:{translate:[0,0],scale:[1,1]},objects:{hexagons:{type:"GeometryCollection",geometries:s}},arcs:c}}function l(t){var e=2*t*Math.sin(Math.PI/3),r=1.5*t;return{stream:function(t){return{point:function(l,n){t.point(l*e/2,(n-(2-(1&n))/3)*r/2)},lineStart:function(){t.lineStart()},lineEnd:function(){t.lineEnd()},polygonStart:function(){t.polygonStart()},polygonEnd:function(){t.polygonEnd()}}}}}var n=document.getElementById("pageContent").offsetWidth-100,o=500,a=25,s=r(a,n,o),c=l(a),u=d3.geo.path().projection(c),i=d3.select("#hex-map").append("svg").attr("width",n).attr("height",o),h=i.append("defs");h.append("pattern").attr("id","forest").attr("x",0).attr("y",0).attr("height",40).attr("width",40).append("image").attr("xlink:href","/hexicons/tree.svg").attr("x",0).attr("y",0).attr("height",40).attr("width",40),h.append("pattern").attr("id","mountain").attr("x",0).attr("y",0).attr("height",40).attr("width",40).append("image").attr("xlink:href","/hexicons/mountain.svg").attr("x",0).attr("y",0).attr("height",40).attr("width",40),i.append("g").attr("class","hexagon").selectAll("path").data(s.objects.hexagons.geometries).enter().append("path").attr("d",function(t){return u(topojson.feature(s,t))}).attr("class",function(t){return t.fill?"fill":null}).style("fill",function(t){var e=Math.floor(4*Math.random())+1;return 1==e?"url(#mountain)":2==e?"url(#forest)":null}).on("mousedown",e),i.append("path").datum(topojson.mesh(s,s.objects.hexagons)).attr("class","mesh").attr("d",u)}]),angular.module("FourthBlightApp").controller("MonSearchCtrl",["$scope","SrdSvc",function(t,e){document.getElementById("monster-text").focus(),document.getElementById("spell-btn").classList.remove("selected-search"),document.getElementById("loc-btn").classList.remove("selected-search"),document.getElementById("monst-btn").classList.add("selected-search"),t.monsterResults={},t.searchMonsters=function(r){r.length>=1&&e.getMonsters(r).then(function(e){t.monsterResults=e})}}]),angular.module("FourthBlightApp").config(["$stateProvider","$urlRouterProvider",function(t,e){e.otherwise("/"),t.state("home",{url:"/",templateUrl:"/templates/home.html",controller:"HomeCtrl"}).state("generators",{url:"/generators",templateUrl:"/templates/generator.html",controller:"GeneratorCtrl"}).state("faq",{url:"/faq",templateUrl:"/templates/faq.html",controller:"FaqCtrl"}).state("further",{url:"/further",templateUrl:"/templates/further.html",controller:"FurtherCtrl"}).state("srd",{url:"/srd",templateUrl:"/templates/srd.html",controller:"SrdCtrl"}).state("srd.spellSearch",{parent:"srd",templateUrl:"/templates/spellSearch.html",controller:"SpellSearchCtrl"}).state("srd.locSearch",{parent:"srd",templateUrl:"/templates/locSearch.html",controller:"LocSearchCtrl"}).state("srd.monSearch",{parent:"srd",templateUrl:"/templates/monSearch.html",controller:"MonSearchCtrl"}).state("map",{url:"/map",templateUrl:"/templates/map.html",controller:"MapCtrl"})}]),angular.module("FourthBlightApp").controller("SpellSearchCtrl",["$scope","SrdSvc",function(t,e){document.getElementById("spell-text").focus(),document.getElementById("loc-btn").classList.remove("selected-search"),document.getElementById("monst-btn").classList.remove("selected-search"),document.getElementById("spell-btn").classList.add("selected-search"),t.spellResults={},t.searchSpell=function(r){r.length>=3&&e.getSpells(r).then(function(e){t.spellResults=e})}}]),angular.module("FourthBlightApp").controller("SrdCtrl",["$scope","SrdSvc",function(t,e){}]),angular.module("FourthBlightApp").service("SrdSvc",["$http",function(t){var e=this;e.getSpells=function(e){return t.get("/api/spells/"+e).then(function(t){return t.data})},e.getLocations=function(e){return t.get("/api/locations/"+e).then(function(t){return t.data})},e.getMonsters=function(e){return t.get("/api/monsters/"+e).then(function(t){return t.data})}}]);
//# sourceMappingURL=data:application/json;base64,
